- Simple file transfer over http using netty 4.0.24 library
- Each thread from the client creates a separate channel to the server and does the data transfer in parallel with the other channels.
- Only one netty EventLoop thread is created serving all the channels.
- Producer and consumer work asynchronously, so produce rate can be slower than consume rate and vice versa.

Server:
- The Server's worker is initialized with NioEventLoopGroup with just 1 thread to serve all requests.
- MyHttpFileServerHandler is an inbound handler whose channelRead method
  - interprets the http request from the client,
  - creates a new Fetcher thread (outside of netty) to "fetch" the file requested,
  - invokes the outbound ChunkedWriteHandler's write with a MyHttpChunkedInput object for the requested fetcher.
- The ChunkedWriteHandler calls the readChunk() method on MyHttpChunkedInput to transfer the file's data in chunks to the client.
- MyHttpChunkedInput's readChunk() will return null if either eof is reached, or if data is not ready to be sent. In the latter case, ChunkedWriteHandler gets suspended. Note that this does not block the EventLoop thread, which can go ahead and serve requests for other channels. When the data is ready, the fetcher calls resumeTransfer on the ChunkedWriteHandler.


Client:
- Takes an input which is the number of threads to create.
- Each thread
  - Makes a request for the file /tmp/server/i
  - Reads it in chunks and writes to /tmp/client/x<threadid>


====


How it works:
-------------
- We create an NIO event loop group for the worker with a single thread.
- The NIO event loop class has a selector to which channels are registered, and the selector does multiplexing of these in the vent loop.
- The NIO event loop's run method runs in a loop and the selector selects keys (channels), and processes the selected keys (which results in events being fired on the channel)
- In our example, when readChunk() returns NULL and it is not eof, the doFlush() method simply exits, so the task finishes, but nothing gets closed.
- In our example, when we call resumeTransfer on the ChunkedWriteHandler, it creates a new Runnable task and adds it to the executor for the context (SingleThreadEventExecutor), so
  that when the selector processes the keys, this task gets run. This runnable task simply calls doFlush() which basically, in a loop, calls readChunk() again and again. If it
  encounters null without eof, again, this task will finish and when the resumeTransfer gets called again, it creates another Runnable task for the executor to execute.
